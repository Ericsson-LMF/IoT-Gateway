package com.ericsson.deviceaccess.serviceschema.codegenerator;

import java.util.ArrayList;
import java.util.List;
import java.util.function.UnaryOperator;

/**
 *
 * @author delma
 */
public class JavaBuilder {

    private static final String GENERATION_WARNING = "THIS IS AUTOMATICALLY GENERATED BY {@link " + JavaBuilder.class.getCanonicalName() + "}.";
    private static final String LINE_END = "\n";
    private static final String STATEMENT_END = ";" + LINE_END;
    private final List<JavaBuilder> innerClasses;
    private final List<String> imports;
    private final List<Variable> variables;
    private final List<Method> methods;
    private String packageString;
    private JavadocBuilder javadoc;
    private AccessModifier accessModifier;
    private String name;
    private boolean singleton;

    public JavaBuilder() {
        packageString = null;
        imports = new ArrayList<>();
        innerClasses = new ArrayList<>();
        variables = new ArrayList<>();
        methods = new ArrayList<>();
        javadoc = null;
        accessModifier = AccessModifier.PUBLIC;
    }

    public JavaBuilder setPackage(String packageString) {
        this.packageString = packageString;
        return this;
    }

    public JavaBuilder addImport(String importString) {
        imports.add(importString);
        return this;
    }

    public JavaBuilder setAccess(AccessModifier modifier) {
        accessModifier = modifier;
        return this;
    }

    public JavaBuilder setName(String name) {
        this.name = capitalize(name.toLowerCase());
        return this;
    }

    public JavaBuilder addInnerClass(UnaryOperator<JavaBuilder> operator) {
        innerClasses.add(operator.apply(new InnerJavaBuilder()));
        return this;
    }

    public JavaBuilder addMethod(Method method) {
        methods.add(method);
        return this;
    }

    public JavaBuilder addVariable(Variable variable) {
        variables.add(variable);
        return this;
    }

    public JavaBuilder setJavadoc(JavadocBuilder builder) {
        this.javadoc = builder;
        return this;
    }

    public String build() {
        return build(new StringBuilder(), 0);
    }

    private String build(StringBuilder builder, int indent) {
        indent(builder, indent);
        builder.append("package ").append(packageString).append(STATEMENT_END);
        builder.append(LINE_END);
        indent(builder, indent);
        imports.forEach(i -> builder.append("import ").append(i).append(STATEMENT_END));
        builder.append(LINE_END);
        builder.append(new JavadocBuilder(GENERATION_WARNING).line(javadoc));
        indent(builder, indent);
        builder.append(("" + accessModifier).toLowerCase()).append(" ").append(singleton ? "enum" : "class").append(" ").append(name).append('{').append(LINE_END);
        if (singleton) {
            indent(builder, indent + 1);
            builder.append("INSTANCE").append(STATEMENT_END);
        }
        builder.append(LINE_END);
        variables.forEach(i -> addVariable(builder, i, indent + 1));
        builder.append(LINE_END);
        methods.forEach(m -> addMethod(builder, m, indent + 1));
        builder.append(LINE_END);
        innerClasses.forEach(i -> builder.append(i.build(builder, indent + 1)));
        indent(builder, indent);
        builder.append('}').append(LINE_END);
        return builder.toString();
    }

    private void addVariable(StringBuilder builder, Variable variable, int indent) {
        indent(builder, indent);
        builder.append(("" + variable.getAccessModifier()).toLowerCase()).append(" ").append(variable.getType()).append(" ").append(variable.getName()).append(STATEMENT_END);
    }

    private void addMethod(StringBuilder builder, Method method, int indent) {
        indent(builder, indent);
        builder.append(("" + method.getAccessModifier()).toLowerCase()).append(" ").append(method.getType()).append(" ").append(method.getName()).append("(").append(getParameters(method)).append(")").append(" ").append("{").append(LINE_END);
        for (String line : method.getCodeLines()) {
            StringBuilder stringBuilder = new StringBuilder(line);
            int found = -2;
            boolean foundIt = false;
            StringBuilder string = new StringBuilder();
            for (int i = 0; i < line.length(); i++) {
                char c = line.charAt(i);
                if (foundIt) {
                    if (c == '%') {
                        stringBuilder.replace(found, i + 1, method.getParameters().get(Integer.parseInt(string.toString())).getName());
                        foundIt = false;
                        found = -2;
                        string.setLength(0);
                    } else {
                        string.append(c);
                    }
                } else if (line.charAt(i) == '%') {
                    found = i;
                } else if (found != -2) {
                    foundIt = true;
                    string.append(c);
                }
            }
            indent(builder, indent + 1);
            builder.append(stringBuilder.toString().replace("%%", "%")).append('\n');
        }
        indent(builder, indent);
        builder.append("}").append(LINE_END);
    }

    private String capitalize(String string) {
        StringBuilder sb = new StringBuilder(string.toLowerCase());
        sb.setCharAt(0, Character.toUpperCase(sb.charAt(0)));
        return sb.toString();
    }

    private void indent(StringBuilder builder, int indent) {
        while (0 < indent) {
            builder.append(' ');
            indent--;
        }
    }

    public void setSigleton(boolean singleton) {
        this.singleton = singleton;
    }

    private StringBuilder getParameters(Method method) {
        StringBuilder builder = new StringBuilder();
        method.getParameters().forEach(p -> builder.append(capitalize(p.getType())).append(" ").append(p.getName().toLowerCase()).append(", "));
        if (builder.length() > 0) {
            builder.setLength(builder.length() - 2);
        }
        return builder;
    }

    private class InnerJavaBuilder extends JavaBuilder {

        @Override
        public JavaBuilder setPackage(String packageString) {
            JavaBuilder.this.setPackage(packageString);
            return this;
        }

        @Override
        public JavaBuilder addImport(String importString) {
            JavaBuilder.this.addImport(importString);
            return this;
        }
    }
}
