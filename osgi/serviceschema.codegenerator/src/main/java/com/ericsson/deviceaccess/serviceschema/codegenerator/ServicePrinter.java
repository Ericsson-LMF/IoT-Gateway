/*
 * Copyright Ericsson AB 2011-2014. All Rights Reserved.
 *
 * The contents of this file are subject to the Lesser GNU Public License,
 *  (the "License"), either version 2.1 of the License, or
 * (at your option) any later version.; you may not use this file except in
 * compliance with the License. You should have received a copy of the
 * License along with this software. If not, it can be
 * retrieved online at https://www.gnu.org/licenses/lgpl.html. Moreover
 * it could also be requested from Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
 * WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
 * EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
 * OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY KIND,

 * EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
 * LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE,
 * YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
 *
 * IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
 * WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
 * REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
 * DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
 * DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY
 * (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED
 * INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE
 * OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH
 * HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 *
 */
package com.ericsson.deviceaccess.serviceschema.codegenerator;

import com.ericsson.deviceaccess.service.xmlparser.ActionDocument.Action;
import com.ericsson.deviceaccess.service.xmlparser.ActionsDocument.Actions;
import com.ericsson.deviceaccess.service.xmlparser.ArgumentsDocument.Arguments;
import com.ericsson.deviceaccess.service.xmlparser.ParameterDocument.Parameter;
import com.ericsson.deviceaccess.service.xmlparser.PropertiesDocument.Properties;
import com.ericsson.deviceaccess.service.xmlparser.ResultsDocument.Results;
import com.ericsson.deviceaccess.service.xmlparser.ServiceDocument.Service;
import com.ericsson.deviceaccess.service.xmlparser.ServiceSchemaDocument;
import com.ericsson.deviceaccess.service.xmlparser.ServicesDocument.Services;
import com.ericsson.deviceaccess.service.xmlparser.ValuesDocument;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import org.apache.xmlbeans.XmlException;

public class ServicePrinter {

    private final String GENERATION_WARNING = "THIS IS AUTOMATICALLY GENERATED BY {@link " + ServicePrinter.class.getCanonicalName() + "}.";

    /**
     * @param builder
     * @param version
     */
    public void printSchemaDefinitionStart(PrintStream out, String version) {
        out.println("package com.ericsson.deviceaccess.spi.service;");
        out.println();
        out.println("import java.util.HashMap;");
        out.println("import java.util.Map;");
        out.println();
        out.println("import com.ericsson.deviceaccess.spi.schema.ServiceSchema;");
        out.println("import com.ericsson.deviceaccess.spi.schema.ActionSchema;");
        out.println("import com.ericsson.deviceaccess.spi.schema.ParameterSchema;");
        out.println("import com.ericsson.deviceaccess.spi.schema.ServiceSchemaError;");
        out.println();
        out.print(new JavadocBuilder(GENERATION_WARNING));
        out.println("public enum SchemaDefinitions {");
        out.println("  INSTANCE;");
        out.println("  private Map<String, ServiceSchema> serviceSchemas = new HashMap<>();");
        out.println();
        out.println("  public ServiceSchema getServiceSchema(String name) {");
        out.println("    return serviceSchemas.get(name);");
        out.println("  }");
        out.println();
        out.println("  static {");
        out.println("    ActionSchema.Builder actionSchemaBuilder = null;");
        out.println("    ParameterSchema.Builder parameterSchemaBuilder = null;");
        out.println("    ServiceSchema.Builder serviceSchemaBuilder = null;");
    }

    public void buildSchemaDefinitions(JavaBuilder builder, Service[] serviceArray) {
        builder.setPackage("com.ericsson.deviceaccess.spi.service");
        //IMPORTS
        builder.addImport("java.util.HashMap");
        builder.addImport("java.util.Map");
        builder.addImport("com.ericsson.deviceaccess.spi.schema.ServiceSchema");
        builder.addImport("com.ericsson.deviceaccess.spi.schema.ActionSchema");
        builder.addImport("com.ericsson.deviceaccess.spi.schema.ParameterSchema");
        builder.addImport("com.ericsson.deviceaccess.spi.schema.ServiceSchemaError");

        //CLASS DEFINITION
        builder.setSigleton(true);
        builder.setName("SchemaDefinitions");
        builder.setJavadoc(new JavadocBuilder("Defines service schemata"));

        //VARIABLES
        builder.addVariable(new Variable("Map<String, ServiceSchema>", "serviceType").init("HashMap<>"));

        //CONSTRUCTORS
        Constructor code = new Constructor().setJavadoc(new JavadocBuilder("Constructor which generates schemata."));
        builder.addConstructor(code);
        code.add("ActionSchema.Builder actionBuilder = null;");
        code.add("ParameterSchema.Builder parameterBuilder = null;");
        code.add("ServiceSchema.Builder serviceBuilder = null;");
        for (Service service : serviceArray) {
            code.add("");
            String name = service.getName();
            code.add("//CREATING SCHEMA FOR: ").append(name);
            code.add("serviceBuilder = new ServiceSchema.Builder(\"").append(name).append("\");");
            addActions(code, service.getActions());
            addProperties(code, service.getProperties());
            code.add("INSTANCE.serviceSchemas.put(\"").append(name).append("\", serviceBuilder.build());");
        }

        //METHODS
        builder.addMethod(
                new Method("ServiceSchema", "getServiceSchema")
                .setJavadoc(new JavadocBuilder("Gets ServiceSchema based on it's name."))
                .addParameter("String", "name", "name of schema")
                .add("return serviceSchemas.get(#0)"));
    }

    public void addActions(CodeBlock code, Actions actions) {
        if (actions == null) {
            return;
        }
        for (Action action : actions.getActionArray()) {
            String name = action.getName();
            boolean mandatory = !action.getOptional();
            code.add("actionBuilder = new ActionSchema.Builder(\"").append(name).append("\").setMandatory(").append(mandatory).append(");");
            Arguments arguments = action.getArguments();
            if (arguments != null) {
                for (Parameter argument : arguments.getParameterArray()) {
                    addParameter(code, argument);
                    code.add("actionBuilder.addArgumentSchema(parameterBuilder.build());");
                }
            }
            Results results = action.getResults();
            if (results != null) {
                for (Parameter result : results.getParameterArray()) {
                    addParameter(code, result);
                    code.add("actionBuilder.addResultSchema(parameterBuilder.build());");
                }
            }
            code.add("serviceBuilder.addActionSchema(actionBuilder.build());");
        }
    }

    private void addProperties(CodeBlock code, Properties properties) {
        if (properties == null) {
            return;
        }
        for (Parameter property : properties.getParameterArray()) {
            addParameter(code, property);
            code.add("serviceBuilder.addPropertySchema(parameterBuilder.build());");
        }
    }

    /**
     * @param out
     * @param action
     */
    private void addParameter(CodeBlock code, Parameter parameter) {
        String name = parameter.getName();
        String type = parameter.getType();
        String default0 = parameter.getDefault();
        if ("String".equals(getType(parameter.getType()))) {
            ValuesDocument.Values values = parameter.getValues();
            if (parameter.getValues() != null && values.getValueArray().length > 0) {
                if (default0 == null) {
                    default0 = values.getValueArray()[0];
                }
                code.add("parameterBuilder = new ParameterSchema.Builder(\"").append(name).append("\").setType(String.class).setDefaultValue(\"").append(default0).append("\");");
                code.add("parameterBuilder.setValidValues(new String[]{");
                for (String value : values.getValueArray()) {
                    code.add("\"" + value + "\",");
                }
                code.add("});");
            } else {
                if (default0 == null) {
                    default0 = "";
                }
                code.add("parameterBuilder = new ParameterSchema.Builder(\"").append(name).append("\").setType(String.class).setDefaultValue(\"").append(default0).append("\");");
            }
        } else {
            if (default0 == null) {
                default0 = "0";
            }
            code.add("parameterBuilder = new ParameterSchema.Builder(\"").append(name).append("\").setType(").append(type).append(".class).setDefaultValue(new ").append(type).append("(").append(default0).append("));");
            if (parameter.getMin() != null) {
                code.add("parameterBuilder.setMinValue(\"").append(parameter.getMin()).append("\");");
            }
            if (parameter.getMax() != null) {
                code.add("parameterBuilder.setMaxValue(\"").append(parameter.getMax()).append("\");");
            }
        }
    }

    /**
     * @param out
     * @param service
     */
    public void printSchemaDefinitionForService(PrintStream out, Service service) {
        out.println();
        out.printf("    serviceSchemaBuilder = new ServiceSchema.Builder(\"%s\");\n", service.getName());
        printActionSchemasCreation(out, service);
        printPropertySchemasCreation(out, service);
        out.printf("    INSTANCE.serviceSchemas.put(\"%s\", serviceSchemaBuilder.build());\n", service.getName());
    }

    /**
     * @param out
     * @param service
     */
    private void printActionSchemasCreation(PrintStream out, Service service) {
        Actions actions = service.getActions();
        if (actions != null && actions.getActionArray().length > 0) {
            for (Action action : actions.getActionArray()) {
                out.printf("    actionSchemaBuilder = new ActionSchema.Builder(\"%s\").setMandatory(%s);\n", action.getName(), !action.getOptional());
                if (action.getArguments() != null && action.getArguments().getParameterArray().length > 0) {
                    for (Parameter argument : action.getArguments().getParameterArray()) {
                        printParameterSchemaCreation(out, argument);
                        out.printf("    actionSchemaBuilder.addArgumentSchema(parameterSchemaBuilder.build());\n");
                    }
                }
                if (action.getResults() != null && action.getResults().getParameterArray().length > 0) {
                    for (Parameter result : action.getResults().getParameterArray()) {
                        printParameterSchemaCreation(out, result);
                        out.printf("    actionSchemaBuilder.addResultSchema(parameterSchemaBuilder.build());\n");
                    }
                }
                out.printf("    serviceSchemaBuilder.addActionSchema(actionSchemaBuilder.build());\n");
            }
        }
    }

    /**
     * @param out
     * @param action
     */
    private void printParameterSchemaCreation(PrintStream out, Parameter parameter) {
        if ("String".equals(getType(parameter.getType()))) {
            if (parameter.getValues() != null && parameter.getValues().getValueArray().length > 0) {
                out.printf("    parameterSchemaBuilder = new ParameterSchema.Builder(\"%s\").setType(String.class).setDefaultValue(\"%s\");\n",
                        parameter.getName(),
                        (parameter.getDefault() != null
                        ? parameter.getDefault()
                        : parameter.getValues().getValueArray()[0]));
                out.printf("    parameterSchemaBuilder.setValidValues(new String[]{\n");
                for (String value : parameter.getValues().getValueArray()) {
                    out.printf("      \"%s\",\n", value);
                }
                out.printf("    });\n");
            } else {
                out.printf("    parameterSchemaBuilder = new ParameterSchema.Builder(\"%s\").setType(String.class).setDefaultValue(\"%s\");\n",
                        parameter.getName(), (parameter.getDefault() != null ? parameter.getDefault() : ""));
            }
        } else {
            out.printf("    parameterSchemaBuilder = new ParameterSchema.Builder(\"%s\").setType(%s.class).setDefaultValue(new %s(%s));\n",
                    parameter.getName(), parameter.getType(), parameter.getType(), (parameter.getDefault() != null ? parameter.getDefault() : "0"));
            if (parameter.getMin() != null) {
                out.printf("    parameterSchemaBuilder.setMinValue(\"%s\");\n", parameter.getMin());
            }
            if (parameter.getMax() != null) {
                out.printf("    parameterSchemaBuilder.setMaxValue(\"%s\");\n", parameter.getMax());
            }
        }
    }

    /**
     * @param out
     * @param service
     */
    private void printPropertySchemasCreation(PrintStream out, Service service) {
        if (service.getProperties() != null && service.getProperties().getParameterArray().length > 0) {
            for (Parameter property : service.getProperties().getParameterArray()) {
                printParameterSchemaCreation(out, property);
                out.printf("    serviceSchemaBuilder.addPropertySchema(parameterSchemaBuilder.build());\n");
            }
        }
    }

    /**
     * @param out
     */
    public void printSchemaDefinitionEnd(PrintStream out) {
        out.println();
        out.println("  }");
        out.println("}");
    }

    public void printServiceImpl(PrintStream out, String version, Service service) {
        String name = service.getName();
        out.printf("package com.ericsson.deviceaccess.spi.service.%s;\n", service.getCategory());
        out.println();
        out.printf("import com.ericsson.deviceaccess.spi.schema.SchemaBasedServiceBase;\n");
        out.printf("import com.ericsson.deviceaccess.spi.service.SchemaDefinitions;\n");
        out.printf("import com.ericsson.deviceaccess.api.GenericDeviceActionContext;\n");
        out.printf("import com.ericsson.deviceaccess.api.GenericDeviceException;\n");
        out.printf("import com.ericsson.deviceaccess.spi.schema.ActionDefinition;\n");
        out.printf("import com.ericsson.deviceaccess.api.service.%s.%s;\n", service.getCategory(), capitalize(service.getName()));
        out.println();
        out.print(new JavadocBuilder(GENERATION_WARNING).line(setEndPunctuation(service.getDescription())));
        out.printf("public abstract class %sBase extends SchemaBasedServiceBase implements %s {\n", capitalize(name), capitalize(name));
        printConstructor(service, out);
        printSetActionsResultsOnContextMethods(service, out);
        printPropertyGettersAndUpdaters(service, out);
        // Mandatory refresh properties action
        out.println();
        out.print(new JavadocBuilder("Refresh all properties."));
        out.println("  protected abstract void refreshProperties();\n");

        out.printf("}\n", capitalize(name));
    }

    public void printServiceInterface(PrintStream out, String version, Service service) {
        String name = service.getName();
        out.printf("package com.ericsson.deviceaccess.api.service.%s;\n", service.getCategory());
        out.println();
        out.printf("import com.ericsson.deviceaccess.api.GenericDeviceService;\n");
        out.printf("import com.ericsson.deviceaccess.api.GenericDeviceException;\n");
        out.println();
        out.print(new JavadocBuilder(GENERATION_WARNING).line(setEndPunctuation(service.getDescription())));
        out.printf("public interface %s extends GenericDeviceService {\n", capitalize(name));
        out.printf("  public static final String SCHEMA_VERSION=\"%s\";\n", version);
        printConstants(service, out);
        printPropertyGetters(service, out);
        printActionDefinitions(service, out);
        printActionsResultTypes(service, out);
        out.println("}");
    }

    private void printConstants(Service service, PrintStream out) {
        out.printf("  public static final String SERVICE_NAME = \"%s\";\n", service.getName());
        Actions actions = service.getActions();
        // Mandatory refresh properties action
        out.printf("  public static final String ACTION_refreshProperties = \"refreshProperties\";\n");
        if (actions != null) {
            for (Action action : actions.getActionArray()) {
                out.printf("  public static final String ACTION_%s = \"%s\";\n", action.getName(), action.getName());
                Arguments arguments = action.getArguments();
                if (arguments != null) {
                    printParameterConstants(out, arguments.getParameterArray(), "ACTION_" + action.getName() + "_ARG");
                }

                Results results = action.getResults();
                if (results != null) {
                    printParameterConstants(out, results.getParameterArray(), "ACTION_" + action.getName() + "_RES");
                }
            }
        }

        // Mandatory last update time property
        out.printf("  public static final String PROP_lastUpdateTime = \"lastUpdateTime\";\n");
        Properties properties = service.getProperties();
        if (properties != null) {
            printParameterConstants(out, properties.getParameterArray(), "PROP");
        }
    }

    /**
     * @param out
     * @param arguments
     */
    private void printParameterConstants(PrintStream out, Parameter[] parameterArray, String prefix) {
        for (Parameter parameter : parameterArray) {
            out.printf("  public static final String " + prefix + "_%s = \"%s\";\n", parameter.getName(), parameter.getName());
            if (parameter.getValues() != null && parameter.getValues().getValueArray().length > 0) {
                for (String value : parameter.getValues().getValueArray()) {
                    out.printf("  public static final String VALUE_" + prefix + "_%s_%s = \"%s\";\n", parameter.getName(), value, value);
                }
            }
        }
    }

    private void printConstructor(Service service, PrintStream out) {
        out.print(new JavadocBuilder("Creates the service and maps actions to methods that shall be defined by subclass."));
        out.printf("  protected %sBase(){\n", capitalize(service.getName()));
        out.println("    super(SchemaDefinitions.INSTANCE.getServiceSchema(SERVICE_NAME));");

        // Mandatory refresh properties action
        out.printf("    defineAction(ACTION_refreshProperties, new ActionDefinition() {\n");
        out.printf("      public void invoke(GenericDeviceActionContext context) throws GenericDeviceException {\n");
        out.printf("        if (!context.isAuthorized()) return;\n");
        out.printf("        refreshProperties();\n");
        out.printf("      }\n");
        out.printf("    });\n");

        if (service.getActions() != null) {
            for (Action action : service.getActions().getActionArray()) {
                out.printf("    defineAction(ACTION_%s, new ActionDefinition() {\n", action.getName());
                out.printf("      public void invoke(GenericDeviceActionContext context) throws GenericDeviceException {\n");
                out.printf("        if (!context.isAuthorized()) return;\n");
                out.printf("        %sexecute%s(%s);\n", getResultDecl(action), capitalize(action.getName()), getGetArgumentsFromContext(action));
                if (action.getResults() != null && action.getResults().getParameterArray().length != 0) {
                    out.printf("        set%sResultOnContext(context, result);\n", capitalize(action.getName()));
                }
                out.printf("      }\n");
                out.printf("    });\n");
            }
        }
        out.printf("  }\n");
    }

    private String getGetArgumentsFromContext(Action action) {
        if (action.getArguments() != null && action.getArguments().getParameterArray().length > 0) {
            StringBuilder signature = new StringBuilder();
            for (Parameter argument : action.getArguments().getParameterArray()) {
                signature.append("context.getArguments().get")
                        .append(capitalize(getType(argument.getType())))
                        .append("Value(ACTION_").append(action.getName())
                        .append("_ARG_").append(argument.getName()).append("), ");
            }
            signature.setLength(signature.length() - 2);
            return signature.toString();
        }
        return "";
    }

    private void printActionsResultTypes(Service service, PrintStream out) {
        if (service.getActions() != null) {
            for (Action action : service.getActions().getActionArray()) {
                if (action.getResults() != null && action.getResults().getParameterArray().length > 0) {
                    out.println();
                    out.print(new JavadocBuilder(GENERATION_WARNING).line("Result from action ").append(action.getName()));
                    out.printf("  public final static class %sResult {\n", capitalize(action.getName()));
                    for (Parameter result : action.getResults().getParameterArray()) {
                        out.print(new JavadocBuilder(setEndPunctuation(result.getDescription())));
                        out.printf("    public %s %s;\n", getType(result.getType()), result.getName());
                    }
                    out.printf("  }\n");
                }
            }
        }
    }

    private void printSetActionsResultsOnContextMethods(Service service, PrintStream out) {
        if (service.getActions() != null) {
            for (Action action : service.getActions().getActionArray()) {
                if (action.getResults() != null && action.getResults().getParameterArray().length > 0) {
                    out.println();
                    out.print(new JavadocBuilder("Sets the result from the '").append(action.getName()).append("' action on the specified context."));
                    out.printf("  private final void set%sResultOnContext(GenericDeviceActionContext context, %sResult result) {\n", capitalize(action.getName()), capitalize(action.getName()));
                    for (Parameter result : action.getResults().getParameterArray()) {
                        out.printf("    context.getResult().getValue().set%sValue(ACTION_%s_RES_%s, result.%s);\n", capitalize(getType(result.getType())), action.getName(), result.getName(), result.getName());
                    }

                    out.printf("  }\n");
                }
            }
        }
    }

    private void printPropertyGettersAndUpdaters(Service service, PrintStream out) {
        if (service.getProperties() != null && service.getProperties().getParameterArray().length > 0) {
            for (Parameter property : service.getProperties().getParameterArray()) {
                out.println();
                String getterSignature = getPropertyGetterSignature(property);
                out.print(new JavadocBuilder().inherit());
                out.printf("  public final %s {\n", getterSignature);
                out.printf("    return getProperties().get%sValue(PROP_%s);\n", capitalize(getType(property.getType())), property.getName());
                out.printf("  }\n");
                out.println();

                String updaterSignature = getPropertyUpdateSignature(property);
                out.print(new JavadocBuilder("Update the '").append(property.getName()).append("' property. To be used by concrete implementations of the service."));
                out.printf("  protected final %s {\n", updaterSignature);
                out.printf("    getProperties().set%sValue(PROP_%s, value);\n", capitalize(getType(property.getType())), property.getName());
                out.printf("  }\n");
            }
        }
    }

    private void printPropertyGetters(Service service, PrintStream out) {
        if (service.getProperties() != null && service.getProperties().getParameterArray().length > 0) {
            for (Parameter property : service.getProperties().getParameterArray()) {
                out.println();
                String getterSignature = getPropertyGetterSignature(property);
                out.print(new JavadocBuilder("Gets the property '").append(property.getName()).append("'.")
                        .line("Property description: ").append(setEndPunctuation(property.getDescription()))
                        .append(builder -> getValidValuesJavadoc(builder, property)));
                out.printf("  %s;\n", getterSignature);
            }
        }
    }

    private JavadocBuilder getValidValuesJavadoc(JavadocBuilder builder, Parameter property) {
        if ("String".equals(getType(property.getType()))) {
            if (property.getValues() != null && property.getValues().getValueArray().length > 0) {
                builder.line("Valid values:");
                getValidValuesString(builder, property.getValues().getValueArray());
            }
            return builder;
        }
        if (property.getMin() != null) {
            builder.line("Min: ").append(property.getMin());
        }
        if (property.getMax() != null) {
            builder.line("Max: ").append(property.getMax());
        }
        return builder;
    }

    private JavadocBuilder getValidValuesString(JavadocBuilder builder, String[] valueArray) {
        builder.line("<ul>");
        for (String value : valueArray) {
            builder.line("<li>\"").append(value).append("\"</li>");
        }
        return builder.line("</ul>");
    }

    private void printActionDefinitions(Service service, PrintStream out) {
        if (service.getActions() != null) {
            for (Action action : service.getActions().getActionArray()) {
                String result = "void";
                if (action.getResults() != null && action.getResults().getParameterArray().length > 0) {
                    result = capitalize(action.getName()) + "Result";
                }
                out.println();
                JavadocBuilder builder = new JavadocBuilder();
                builder.line("Execute the action '").append(action.getName()).append("'.");
                builder.line("Action description: ").append(action.getDescription());
                if (action.getArguments() != null && action.getArguments().getParameterArray().length > 0) {
                    builder.emptyLine();
                    for (Parameter arg : action.getArguments().getParameterArray()) {
                        builder.parameter(arg.getName(), arg.getDescription());
                    }
                }

                if (action.getResults() != null) {
                    builder.emptyLine();
                    builder.result("{@link ").append(capitalize(action.getName())).append("Result}");
                }
                out.print(builder);
                out.printf("  %s execute%s(%s) throws GenericDeviceException;\n", result, capitalize(action.getName()), getSignature(action));
            }
        }
    }

    private String getResultDecl(Action action) {
        if (action.getResults() != null && action.getResults().getParameterArray().length != 0) {
            return capitalize(action.getName()) + "Result result = ";
        }
        return "";
    }

    private String getSignature(Action action) {
        if (action.getArguments() != null && action.getArguments().getParameterArray().length > 0) {
            StringBuilder signature = new StringBuilder();
            for (com.ericsson.deviceaccess.service.xmlparser.ParameterDocument.Parameter argument : action.getArguments().getParameterArray()) {
                signature.append(getType(argument.getType()))
                        .append(" ")
                        .append(argument.getName())
                        .append(", ");
            }
            signature.setLength(signature.length() - 2);
            return signature.toString();
        }
        return "";
    }

    private String getType(String type) {
        if (type.toLowerCase().startsWith("int")) {
            return "int";
        } else if (type.toLowerCase().startsWith("float")) {
            return "float";
        } else {
            return "String";
        }
    }

    private String capitalize(String string) {
        StringBuilder sb = new StringBuilder(string);
        sb.setCharAt(0, Character.toUpperCase(sb.charAt(0)));
        return sb.toString();
    }

    private String getPropertyGetterSignature(Parameter property) {
        return getType(property.getType()) + " get" + capitalize(property.getName()) + "()";
    }

    private String getPropertyUpdateSignature(Parameter property) {
        return "void update" + capitalize(property.getName()) + "(" + getType(property.getType()) + " value)";
    }

    private String setEndPunctuation(String description) {
//        description = description.trim();
        if (description.endsWith(".")) {
            return description;
        }
        return description + ".";
    }

    public static void main(String[] args) throws XmlException, IOException {
        ServiceSchemaDocument serviceSchemaDocument = ServiceSchemaDocument.Factory.parse(new File("src/test/resources/services-example.xml"));
        String version = serviceSchemaDocument.getServiceSchema().getVersion();
        Services services = serviceSchemaDocument.getServiceSchema().getServices();
        ServicePrinter sp = new ServicePrinter();
        Service[] serviceArray = services.getServiceArray();

        JavaBuilder builder = new JavaBuilder();
        sp.buildSchemaDefinitions(builder, serviceArray);
        System.out.print(builder.build(ServicePrinter.class));
        System.out.println("=============================================");

        sp.printSchemaDefinitionStart(System.out, version);
        for (Service service : serviceArray) {
            sp.printSchemaDefinitionForService(System.out, service);
        }
        sp.printSchemaDefinitionEnd(System.out);
        System.out.println("=============================================");
        System.out.println("=============================================");
        System.out.println("=============================================");
        System.out.println("=============================================");

        for (Service service : serviceArray) {
            sp.printServiceInterface(System.out, version, service);
            System.out.println("=============================================");
            sp.printServiceImpl(System.out, version, service);
            System.out.println("=============================================");
            System.out.println("=============================================");
        }

    }
}
